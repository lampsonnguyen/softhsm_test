using System;
using System.Collections.Generic;
using System.Text;
using Net.Pkcs11Interop.Common;
using Net.Pkcs11Interop.HighLevelAPI;

class Program
{
    static void Main(string[] args)
    {
        // Path to your PKCS#11 library
        string pkcs11LibraryPath = "path/to/your/pkcs11/library.so"; // or .dll for Windows
        string userPin = "your-pin";

        // Data to be signed
        string dataToSign = "Hello, PKCS#11!";
        byte[] data = Encoding.UTF8.GetBytes(dataToSign);

        // Initialize the library
        using (Pkcs11 pkcs11 = new Pkcs11(pkcs11LibraryPath, AppType.SingleThreaded))
        {
            // Get the first slot with a token present
            Slot slot = pkcs11.GetSlotList(SlotsType.WithTokenPresent)[0];

            // Open a read-write session
            using (Session session = slot.OpenSession(SessionType.ReadWrite))
            {
                // Login as user
                session.Login(CKU.CKU_USER, userPin);

                // Find the first private key for signing
                ObjectHandle privateKey = FindPrivateKey(session);

                // Sign data
                byte[] signature = SignData(session, privateKey, data);

                Console.WriteLine("Signature: " + BitConverter.ToString(signature).Replace("-", ""));

                // Find the corresponding public key for verification
                ObjectHandle publicKey = FindPublicKey(session);

                // Verify signature
                bool isValid = VerifyData(session, publicKey, data, signature);

                Console.WriteLine("Signature is " + (isValid ? "valid" : "invalid"));

                // Logout
                session.Logout();
            }
        }
    }

    private static ObjectHandle FindPrivateKey(Session session)
    {
        // Define search template for private key
        List<ObjectAttribute> privateKeyAttributes = new List<ObjectAttribute>
        {
            new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY),
            new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_EC),
            new ObjectAttribute(CKA.CKA_SIGN, true)
        };

        // Find private key
        List<ObjectHandle> privateKeys = session.FindAllObjects(privateKeyAttributes);

        if (privateKeys.Count == 0)
            throw new Exception("No private key found");

        return privateKeys[0];
    }

    private static byte[] SignData(Session session, ObjectHandle privateKey, byte[] data)
    {
        // Specify the mechanism
        Mechanism mechanism = new Mechanism(CKM.CKM_ECDSA_SHA384);

        // Sign the data
        return session.Sign(mechanism, privateKey, data);
    }

    private static ObjectHandle FindPublicKey(Session session)
    {
        // Define search template for public key
        List<ObjectAttribute> publicKeyAttributes = new List<ObjectAttribute>
        {
            new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PUBLIC_KEY),
            new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_EC),
            new ObjectAttribute(CKA.CKA_VERIFY, true)
        };

        // Find public key
        List<ObjectHandle> publicKeys = session.FindAllObjects(publicKeyAttributes);

        if (publicKeys.Count == 0)
            throw new Exception("No public key found");

        return publicKeys[0];
    }

    private static bool VerifyData(Session session, ObjectHandle publicKey, byte[] data, byte[] signature)
    {
        // Specify the mechanism
        Mechanism mechanism = new Mechanism(CKM.CKM_ECDSA_SHA384);

        // Verify the signature
        try
        {
            session.Verify(mechanism, publicKey, data, signature);
            return true;
        }
        catch (Pkcs11Exception)
        {
            return false;
        }
    }
}
